#if(${name_kebab}) #end
#if(${data_name_pascal}) #end
#if(${fix_name_kebab}) #end
#parse('_name-converts')
#parse('_code-converts')
#parse('_data-name-converts')
#parse('_fix-name-converts')
import { ChangeDetectionStrategy, Component, ViewEncapsulation } from "@angular/core";
import {
  ${DS}effect,
  ${DS}signal,
  ISharedDataModalInputParam,
  ISharedDataModalOutputResult,
  SdBaseContainerControl,
  SdButtonControl,
  SdDockContainerControl,
  SdDockControl,
  SdModalBase,
  TemplateTargetDirective,
} from "@simplysm/sd-angular";
import { ${name_pascal}Page } from "./${name_kebab}.page";

@Component({
  selector: "app-${name_kebab}-select-modal",
  changeDetection: ChangeDetectionStrategy.OnPush,
  encapsulation: ViewEncapsulation.None,
  standalone: true,
  imports: [
    SdDockContainerControl,
    SdDockControl,
    SdButtonControl,
    ${name_pascal}Page,
    TemplateTargetDirective,
    SdBaseContainerControl,
  ],
  template: `
    <sd-base-container>
      <ng-template target="content">
        <sd-dock-container style="min-width: 40em">
          <app-${name_kebab}
            [(initialized)]="initialized"
            [selectMode]="params().selectMode"
            [(selectedItemIds)]="selectedItemIds"
            #if(${fix_name_kebab} != "")
            [isFix${fix_name_pascal}]="params().isFix${fix_name_pascal}"
            [${fix_name_camel}Id]="params().${fix_name_camel}Id"
            #end
          />

          <sd-dock
            position="bottom" class="p-sm-default bdt bdt-trans-light flex-row flex-gap-sm"
            style="justify-content: right"
          >
            <sd-button theme="danger" inline (click)="onCancelButtonClick()">
              {{ params().selectMode === "multi" ? "모두" : "선택" }}
              해제
            </sd-button>
            @if (params().selectMode === "multi") {
              <sd-button theme="primary" inline (click)="onConfirmButtonClick()">
                확인({{ this.selectedItemIds().length }})
              </sd-button>
            }
          </sd-dock>
        </sd-dock-container>
      </ng-template>
    </sd-base-container>
  `,
})
export class ${name_pascal}SelectModal extends SdModalBase<IModalParam, ISharedDataModalOutputResult> {
  initialized = ${DS}signal(false);
  selectedItemIds = ${DS}signal<number[]>([]);

  constructor() {
    super();

    ${DS}effect([this.initialized], () => {
      if(this.initialized()){
        this.open();
      }
    });

    ${DS}effect([this.params], () => {
      this.selectedItemIds.set(this.params().selectedItemKeys ?? []);
    });

    ${DS}effect([this.selectedItemIds], () => {
      if (
        this.params().selectMode === "single"
        && this.selectedItemIds()[0] !== this.params().selectedItemKeys?.[0]
      ) {
        this.close({ selectedItemKeys: this.selectedItemIds() });
      }
    });
  }

  onConfirmButtonClick() {
    this.close({ selectedItemKeys: this.selectedItemIds() });
  }

  onCancelButtonClick() {
    this.close({ selectedItemKeys: [] });
  }
}

interface IModalParam extends ISharedDataModalInputParam {
  #if(${fix_name_kebab} != "")
  isFix${fix_name_pascal}?: boolean;
  ${fix_name_camel}Id?: number;
  #end
}
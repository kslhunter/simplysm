#if(${name_kebab}) #end
#if(${name_kor}) #end
#if(${useEditYN}) #end
#if(${useIsDeletedFlagYN}) #end
#if(${useSharedEmitYN}) #end
#if(${useSelectYN}) #end
#if(${useSummaryYN}) #end
#if(${data_name_pascal}) #end
#if(${fix_name_kebab}) #end
#parse('_name-converts')
#parse('_code-converts')
#parse('_data-name-converts')
#parse('_fix-name-converts')
import {
  ChangeDetectionStrategy,
  Component,
  HostListener,
  inject,
  #if(${useSelectYN} == "Y")
  input,
  model,
  #end
  ViewEncapsulation,
} from "@angular/core";
import {
  ${DS}computed,
  ${DS}effect,
  ${DS}signal,
  ISdSheetColumnOrderingVM,
  #if(${useEditYN} == "Y")
  FormatPipe,
  SdAnchorControl,
  SdFileDialogProvider,
  SdModalProvider,
  #end
  SdAppStructureProvider,
  SdBaseContainerControl,
  SdButtonControl,
  #if(${useIsDeletedFlagYN} == "Y")
  SdCheckboxControl,
  #end
  SdDockContainerControl,
  SdDockControl,
  SdFormBoxControl,
  SdFormBoxItemControl,
  SdFormControl,
  SdIconControl,
  SdPaneControl,
  SdSheetColumnCellTemplateDirective,
  SdSheetColumnDirective,
  SdSheetControl,
  SdTextfieldControl,
  SdToastProvider,
  SdTopbarMenuControl,
  TemplateTargetDirective,
  #if(${fix_name_kebab} != "")
  transformBoolean,
  #end
  #if(${useSelectYN} == "Y")
  useCumulateSelectedKeys,
  #end
} from "@simplysm/sd-angular";
import {
  #if(${useEditYN} == "Y")
  ArgumentError,
  DateTime,
  #end
  ObjectUtils,
  StringUtils,
} from "@simplysm/sd-core-common";
import {
  faEdit,
  faEraser,
  faFileExcel,
  faPlusCircle,
  #if(${useIsDeletedFlagYN} == "Y")
  faRedo,
  #end
  faRefresh,
  faSearch,
  faUpload,
} from "@fortawesome/pro-regular-svg-icons";
import { SdExcelWorkbook } from "@simplysm/sd-excel";
#if(${useEditYN} == "Y")
import { ${name_pascal}DetailModal } from "./${name_kebab}.detail-modal";
#end
import {
  #if(${useEditYN} == "Y")
  AppDataProvider,
  #end
  AppOrmProvider,
  AppSharedDataProvider
} from "@${PROJECT_NAME}/client-common";

@Component({
  selector: "app-${name_kebab}",
  changeDetection: ChangeDetectionStrategy.OnPush,
  encapsulation: ViewEncapsulation.None,
  standalone: true,
  imports: [
    SdTextfieldControl,
    #if(${useIsDeletedFlagYN} == "Y")
    SdCheckboxControl,
    #end
    SdSheetColumnCellTemplateDirective,
    SdBaseContainerControl,
    SdIconControl,
    SdTopbarMenuControl,
    TemplateTargetDirective,
    SdDockContainerControl,
    SdDockControl,
    SdFormControl,
    SdFormBoxControl,
    SdFormBoxItemControl,
    SdButtonControl,
    #if(${useEditYN} == "Y")
    SdAnchorControl,
    FormatPipe,
    #end
    SdSheetColumnDirective,
    SdPaneControl,
    SdSheetControl,
  ],
  template: `
    <sd-base-container [busy]="busyCount() > 0">
      <ng-template target="topbar">
        <sd-topbar-menu theme="info" (click)="onRefreshButtonClick()">
          <sd-icon [icon]="faRefresh" fixedWidth />
          새로고침 <small>(CTRL+ALT+L)</small>
        </sd-topbar-menu>
      </ng-template>

      <ng-template target="content">
        @if (initialized()) {
          <sd-dock-container class="p-lg show-effect">
            <sd-dock class="pb-lg">
              <sd-form (submit)="onFilterSubmit()">
                <sd-form-box layout="inline">
                  <sd-form-box-item>
                    <sd-button type="submit" theme="info">
                      <sd-icon [icon]="faSearch" fixedWidth />
                      조회
                    </sd-button>
                  </sd-form-box-item>
                  <sd-form-box-item label="검색어">
                    <sd-textfield
                      type="text"
                      [(value)]="filter().searchText"
                      (valueChange)="filter.${DS}mark()"
                    />
                  </sd-form-box-item>
                  #if(${useIsDeletedFlagYN} == "Y")
                  <sd-form-box-item>
                    <sd-checkbox
                      [(value)]="filter().isIncludeDeleted"
                      (valueChange)="filter.${DS}mark()"
                    >
                      삭제항목 포함
                    </sd-checkbox>
                  </sd-form-box-item>
                  #end
                </sd-form-box>
              </sd-form>
            </sd-dock>

            <sd-dock class="pb-xs">
              <div class="flex-row flex-gap-sm">
                #if(${useEditYN} == "Y")
                @if (perms().includes('edit')) {
                  <sd-button size="sm" theme="link-primary" (click)="onCreateItemButtonClick()">
                    <sd-icon [icon]="faPlusCircle" fixedWidth />
                    등록 <small>(CTRL+INSERT)</small>
                  </sd-button>

                  #if(${useSelectYN} == "Y")
                  @if (!selectMode()) {
                  #end
                  <sd-button
                    size="sm"
                    theme="link-danger"
                    #if(${useIsDeletedFlagYN} == "Y")
                    (click)=" onToggleDeletesButtonClick(true)"
                    [disabled]="!isSelectedItemsHasNotDeleted()"
                    #else
                    (click)=" onDeletesButtonClick()"
                    [disabled]="this.selectedItems().length === 0"
                    #end
                  >
                    <sd-icon [icon]="faEraser" [fixedWidth]="true" />
                    선택 삭제
                  </sd-button>
                  #if(${useIsDeletedFlagYN} == "Y")
                  @if (isSelectedItemsHasDeleted()) {
                    <sd-button
                      size="sm"
                      theme="link-warning"
                      (click)="onToggleDeletesButtonClick(false)"
                    >
                      <sd-icon [icon]="faRedo" [fixedWidth]="true" />
                      선택 복구
                    </sd-button>
                  }
                  #end
                  #if(${useSelectYN} == "Y")
                  }
                  #end

                  <sd-button size="sm" theme="link-success" (click)="onUploadExcelButtonClick()">
                    <sd-icon [icon]="faUpload" fixedWidth />
                    엑셀 업로드
                  </sd-button>
                }
                #end

                <sd-button size="sm" theme="link-success" (click)="onDownloadExcelButtonClick()">
                  <sd-icon [icon]="faFileExcel" fixedWidth />
                  엑셀 다운로드
                </sd-button>
              </div>
            </sd-dock>

            <sd-pane>
              <sd-sheet
                key="${name_kebab}-sheet"
                [items]="items()"
                [(page)]="page"
                [pageLength]="pageLength()"
                [(ordering)]="ordering"
                #if(${useSelectYN} == "Y" && ${useEditYN} == "Y")
                [selectMode]="selectMode() ?? 'multi'"
                [autoSelect]="selectMode() === 'single' ? 'click' : undefined"
                [(selectedItems)]="selectedItems"
                #elseif(${useSelectYN} == "Y")
                [selectMode]="selectMode()"
                [autoSelect]="selectMode() === 'single' ? 'click' : undefined"
                [(selectedItems)]="selectedItems"
                #elseif(${useEditYN} == "Y")
                selectMode="multi"
                [(selectedItems)]="selectedItems"
                #end
                #if(${useIsDeletedFlagYN} == "Y")
                [getItemCellStyleFn]="getItemCellStyleFn"
                #end
              >
                <sd-sheet-column fixed header="#[[#]]#" key="id">
                  <ng-template [cell]="items()" let-item>
                    <div class="p-xs-sm">
                      #if(${useEditYN} == "Y")
                      @if (perms().includes('edit')) {
                        <sd-anchor
                          (click)="onItemClick(item, ${DS}event)"
                          class="flex-row flex-gap-sm"
                        >
                          <div>
                            <sd-icon [icon]="faEdit" />
                          </div>
                          <div class="flex-grow tx-right">
                            {{ item.id }}
                          </div>
                        </sd-anchor>
                      } @else {
                      #end
                        <div class="tx-right">
                          {{ item.id }}
                        </div>
                      #if(${useEditYN} == "Y")
                      }
                      #end
                    </div>
                  </ng-template>
                </sd-sheet-column>

                <sd-sheet-column header="${name_kor}명" key="name">
                  <ng-template [cell]="items()" let-item>
                    <div class="p-xs-sm">
                      {{ item.name }}
                    </div>
                  </ng-template>
                </sd-sheet-column>

                #if(${useEditYN} == "Y")
                <sd-sheet-column [header]="['최종수정', '일시']" key="lastModifyDateTime">
                  #if(${useSummaryYN} == "Y")
                  <ng-template #summary>
                    <div class="p-xs-sm tx-center">
                      {{ summaryData().lastModifyDateTime | format: "yyyy-MM-dd HH:mm" }}
                    </div>
                  </ng-template>
                  #end
                  <ng-template [cell]="items()" let-item>
                    <div class="p-xs-sm tx-center">
                      {{ item.lastModifyDateTime | format: "yyyy-MM-dd HH:mm" }}
                    </div>
                  </ng-template>
                </sd-sheet-column>
                <sd-sheet-column [header]="['최종수정', '직원']" key="lastModifyEmployeeName">
                  <ng-template [cell]="items()" let-item>
                    <div class="p-xs-sm tx-center">
                      {{ item.lastModifyEmployeeName }}
                    </div>
                  </ng-template>
                </sd-sheet-column>
                #end
              </sd-sheet>
            </sd-pane>
          </sd-dock-container>
        }
      </ng-template>
    </sd-base-container>
  `,
})
export class ${name_pascal}Page {
  #[[#]]#sdToast = inject(SdToastProvider);
  #[[#]]#sdAppStructure = inject(SdAppStructureProvider);
  #if(${useEditYN} == "Y")
  #[[#]]#sdModal = inject(SdModalProvider);
  #[[#]]#sdFileDialog = inject(SdFileDialogProvider);
  #end
  #[[#]]#appSharedData = inject(AppSharedDataProvider);
  #[[#]]#appOrm = inject(AppOrmProvider);
  #if(${useEditYN} == "Y")
  #[[#]]#appData = inject(AppDataProvider);
  #end

  name = "${name_kor}";
  viewCodes = ["${code}"];
  perms = ${DS}computed(() => this.#[[#]]#sdAppStructure.getViewPerms2(
    this.viewCodes,
    [
      "use",
      #if(${useEditYN} == "Y")
      "edit",
      #end
    ],
  ));

  #if(${useSelectYN} == "Y")
  initialized = model(false);
  #else
  initialized = ${DS}signal(false);
  #end
  busyCount = ${DS}signal(0);

  filter = ${DS}signal<IFilterVM>({
    #if(${fix_name_kebab} != "")
    include${fix_name_pascal}Ids: [],
    #end
    #if(${useIsDeletedFlagYN} == "Y")
    isIncludeDeleted: false,
    #end
  });
  lastFilter = ${DS}signal(ObjectUtils.clone(this.filter()));

  items = ${DS}signal<IItemVM[]>([]);
  #if(${useSummaryYN} == "Y")
  summaryData = ${DS}signal<ISummaryVM>({});
  #end

  page = ${DS}signal(0);
  pageLength = ${DS}signal(0);
  ordering = ${DS}signal<ISdSheetColumnOrderingVM[]>([]);

  #if(${useEditYN} == "Y" || ${useSelectYN} == "Y")
  selectedItems = ${DS}signal<IItemVM[]>([]);
  #end
  #if(${useSelectYN} == "Y")
  selectMode = input<"single" | "multi">();
  selectedItemIds = model<number[]>([]);
  #end

  #if(${useIsDeletedFlagYN} == "Y")
  isSelectedItemsHasDeleted = ${DS}computed(() =>
    this.selectedItems().some((item) => item.isDeleted),
  );
  isSelectedItemsHasNotDeleted = ${DS}computed(() =>
    this.selectedItems().some((item) => !item.isDeleted),
  );

  getItemCellStyleFn = (item: IItemVM) => (
    item.isDeleted ? "text-decoration: line-through;" : undefined
  );
  #end

  #if(${fix_name_kebab} != "")
  isFix${fix_name_pascal} = input(false, { transform: transformBoolean });
  ${fix_name_camel}Id = input<number>();
  #end

  constructor() {
    #if(${useSelectYN} == "Y")
    useCumulateSelectedKeys(
      this.items,
      this.selectMode,
      this.selectedItems,
      this.selectedItemIds,
      item => item.id
    );
    #end

    #if(${fix_name_kebab} != "")
    ${DS}effect([this.isFix${fix_name_pascal}, this.${fix_name_camel}Id], () => {
      this.filter.update(v => ({
        ...v,
        include${fix_name_pascal}Ids: this.selectMode() != null ? [undefined, this.${fix_name_camel}Id()].distinct()
          : this.isFix${fix_name_pascal}() ? [this.${fix_name_camel}Id() ?? undefined]
            : this.${fix_name_camel}Id() != null ? [this.${fix_name_camel}Id()] : [],
      }));
      this.lastFilter.set(ObjectUtils.clone(this.filter()));
    });
    #end

    ${DS}effect([this.page, this.lastFilter, this.ordering], async () => {
      if (!this.perms().includes("use")) {
        this.initialized.set(true);
        return;
      }

      this.busyCount.update((v) => v + 1);
      await this.#[[#]]#sdToast.try(async () => {
        await this.#[[#]]#appSharedData.wait();
        await this.#[[#]]#refresh();
      });
      this.busyCount.update((v) => v - 1);
      this.initialized.set(true);
    });
  }

  onFilterSubmit() {
    this.page.set(0);
    this.lastFilter.set(ObjectUtils.clone(this.filter()));
  }

  @HostListener("sdRefreshCommand")
  onRefreshButtonClick() {
    if (this.busyCount() > 0) return;

    this.lastFilter.${DS}mark();
  }

  async #[[#]]#refresh() {
    const result = await this.#[[#]]#searchAsync("sheet");
    this.items.set(result.items);
    this.pageLength.set(result.pageLength ?? 0);
    #if(${useSummaryYN} == "Y")
    this.summaryData.set(result.summary ?? {});
    #end

    #if(${useSelectYN} == "Y" || ${useEditYN} == "Y")
    this.selectedItems.set(this.items()
      .filter(item => this.selectedItems().some(sel => sel.id === item.id)));
    #end
  }

  async onDownloadExcelButtonClick() {
    this.busyCount.update((v) => v + 1);
    await this.#[[#]]#sdToast.try(async () => {
      const wb = SdExcelWorkbook.create();
      const ws = await wb.createWorksheetAsync(this.name);

      const data = await this.#[[#]]#searchAsync("excel");
      await ws.setDataMatrixAsync([
        [
          "ID",
          "${name_kor}명",
          #if(${useEditYN} == "Y")
          "최종수정일시",
          "최종수정직원",
          #end
          #if(${useIsDeletedFlagYN} == "Y")
          "삭제",
          #end
        ],
        ...data.items.map((item) => [
          item.id,
          item.name,
          #if(${useEditYN} == "Y")
          item.lastModifyDateTime,
          item.lastModifyEmployeeName,
          #end
          #if(${useIsDeletedFlagYN} == "Y")
          item.isDeleted,
          #end
        ]),
      ]);

      const blob = await wb.getBlobAsync();
      blob.download(`${DS}{this.name}.xlsx`);
    });
    this.busyCount.update((v) => v - 1);
  }

  async #[[#]]#searchAsync<T extends "excel" | "sheet">(type: T): Promise<{
    items: IItemVM[],
    pageLength?: number;
    #if(${useSummaryYN} == "Y")
      summary?: ISummaryVM;
    #end
  }> {
    return await this.#[[#]]#appOrm.connectAsync(async (db) => {
      let qr1 = db.${data_name_camel}.joinLastDataLog();

      //-- FILTER
      const filter = this.lastFilter();
      if (!StringUtils.isNullOrEmpty(filter.searchText)) {
        qr1 = qr1.search((item) => [item.name], filter.searchText);
      }

      if (filter.include${fix_name_pascal}Ids.length > 0) {
        qr1 = qr1.where(item => [db.qh.in(item.${fix_name_kebab}Id, filter.include${fix_name_pascal}Ids)]);
      }

      #if(${useIsDeletedFlagYN} == "Y")
      if (!filter.isIncludeDeleted) {
        qr1 = qr1.where((item) => [db.qh.equal(item.isDeleted, false)]);
      }
      #end

      //-- PAGE LENGTH (SHEET)
      const pageLength = type === "sheet" ? Math.ceil(await qr1.countAsync() / 50) : undefined;

      #if(${useSummaryYN} == "Y")
      //-- SUMMARY (SHEET)
      const summary = type === "sheet" ? (
        (await qr1.select((item) => ({
          lastModifyDateTime: db.qh.max(item.lastModifyDateTime),
        })).singleAsync()) ?? {}
      ) : undefined;
      #end

      let qr2 = qr1
        .select<IItemVM>((item) => ({
          id: item.id.notNull(),
          name: item.name,
          #if(${useIsDeletedFlagYN} == "Y")
          isDeleted: item.isDeleted,
          #end
          #if(${useEditYN} == "Y")
          lastModifyDateTime: item.lastDataLog.doneDateTime,
          lastModifyEmployeeName: item.lastDataLog.doneEmployeeName,
          #end
        }));

      //-- ORDERING
      const ordering = this.ordering();
      for (const orderingItem of ordering) {
        qr2 = qr2.orderBy(orderingItem.key, orderingItem.desc);
      }
      if (!ordering.some((item) => item.key === "name")) {
        qr2 = qr2.orderBy((item) => item.name);
      }

      //-- LIMIT
      if (type === "sheet") {
        qr2 = qr2.limit(this.page() * 50, 50);
      }

      const items = await qr2.resultAsync();

      return {
        items,
        pageLength,
        #if(${useSummaryYN} == "Y")
        summary,
        #end
      };
    });
  }

  #if(${useEditYN} == "Y")
  async onCreateItemButtonClick() {
    if (!this.perms().includes("edit")) return;

    await this.#[[#]]#editItem();
  }

  async onItemClick(item: IItemVM, event: MouseEvent) {
    if (!this.perms().includes("edit")) return;

    event.preventDefault();
    event.stopPropagation();

    await this.#[[#]]#editItem(item.id);
  }

  async #[[#]]#editItem(itemId?: number) {
    const result = await this.#[[#]]#sdModal.showAsync(
      ${name_pascal}DetailModal,
      itemId != null ? `${DS}{this.name}수정(#[[#]]#${DS}{itemId})` : `${DS}{this.name}등록`,
      {
        itemId: itemId,
        #if(${fix_name_kebab} != "")
        isFix${fix_name_pascal}: this.isFix${fix_name_pascal}(),
        ${fix_name_camel}Id: this.${fix_name_camel}Id()
        #end
      },
    );
    if (!result) return;

    this.busyCount.update((v) => v + 1);
    await this.#[[#]]#sdToast.try(async () => {
      await this.#[[#]]#refresh();
    });
    this.busyCount.update((v) => v - 1);
  }

  #if(${useIsDeletedFlagYN} == "Y")
  async onToggleDeletesButtonClick(del: boolean) {
    if (!this.perms().includes("edit")) return;

    this.busyCount.update((v) => v + 1);

    await this.#[[#]]#sdToast.try(async () => {
      const selectedItemIds = this.selectedItems().map((item) => item.id);

      #if(${useSharedEmitYN} == "Y")
      const changedIds1 =
      #end
      await this.#[[#]]#appOrm.connectAsync(async (db) => {
        const changedIds = (
          await db.${data_name_camel}.where((item) => [
            db.qh.in(item.id, selectedItemIds),
            db.qh.equal(item.isDeleted, !del),
          ]).updateAsync(() => ({ isDeleted: del }), ["id"])
        ).map((item) => item.id!);

        for (const changedId of changedIds) {
          await db.${data_name_camel}.insertDataLogAsync({
            type: del ? "삭제" : "복구",
            itemId: changedId,
            valueJson: undefined,
            doneEmployeeId: this.#[[#]]#appData.authInfo()!.employee.id,
          });
        }

        return changedIds;
      });

      #if(${useSharedEmitYN} == "Y")
      await this.#[[#]]#appSharedData.emitAsync("${name_kor}", changedIds1);
      #end

      await this.#[[#]]#refresh();

      this.#[[#]]#sdToast.success((del ? "삭제" : "복구") + `되었습니다.`);
    });
    this.busyCount.update((v) => v - 1);
  }
  #else
  async onDeletesButtonClick() {
    if (!this.perms().includes("edit")) return;
    if (!confirm("삭제한 자료는 복구할 수 없습니다. 정말 삭제하시겠습니까?")) return;

    this.busyCount.update((v) => v + 1);

    await this.#sdToast.try(async () => {
      const selectedItemIds = this.selectedItems().map((item) => item.id);

      #if(${useSharedEmitYN} == "Y")
      const changedIds1 =
      #end
      await this.#appOrm.connectAsync(async (db) => {
        const changedIds = (
          await db.${data_name_camel}.where((item) => [
            db.qh.in(item.id, selectedItemIds),
          ]).deleteAsync(["id"])
        ).map((item) => item.id!);

        for (const changedId of changedIds) {
          await db.${data_name_camel}.insertDataLogAsync({
            type: "삭제",
            itemId: changedId,
            valueJson: undefined,
            doneEmployeeId: this.#appData.authInfo()!.employee.id,
          });
        }
        return changedIds;
      });

      #if(${useSharedEmitYN} == "Y")
      await this.#[[#]]#appSharedData.emitAsync("${name_kor}", changedIds1);
      #end

      await this.#refresh();

      this.#sdToast.success(`삭제되었습니다.`);
    });
    this.busyCount.update((v) => v - 1);
  }
  #end

  async onUploadExcelButtonClick() {
    if (!this.perms().includes("edit")) return;

    const file = await this.#[[#]]#sdFileDialog.showAsync(
      false,
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    );
    if (!file) return;

    this.busyCount.update((v) => v + 1);

    await this.#[[#]]#sdToast.try(async () => {
      const wb = await SdExcelWorkbook.loadAsync(file);
      const ws = await wb.getWorksheetAsync(0);
      const wsName = await ws.getNameAsync();
      const wsdt = await ws.getDataTableAsync();

      const excelItems = wsdt
        .filter((item) => item["${name_kor}명"] !== undefined)
        .map((item) => ({
          id: item["ID"] as number | undefined,
          name: item["${name_kor}명"] as string,
          #if(${useIsDeletedFlagYN} == "Y")
          isDeleted: (item["삭제"] ?? false) as boolean,
          #end
        }));
      if (excelItems.length === 0) throw Error("엑셀파일에서 데이터를 찾을 수 없습니다.");

      ObjectUtils.validateArrayWithThrow(wsName, excelItems, {
        id: { displayName: "ID", type: Number },
        name: { displayName: "${name_kor}명", type: String, notnull: true },
        #if(${useIsDeletedFlagYN} == "Y")
        isDeleted: { displayName: "삭제", type: Boolean, notnull: true },
        #end
      });

      #if(${useSharedEmitYN} == "Y")
      const changedIds: number[] = [];
      #end
      await this.#[[#]]#appOrm.connectAsync(async (db) => {
        for (const excelItem of excelItems) {
          if (
            #if(${useIsDeletedFlagYN} == "Y")
            !excelItem.isDeleted &&
            #end
            (await db.${data_name_camel}
              .where((item) => [
                db.qh.equal(item.name, excelItem.name),
                db.qh.notEqual(item.id, excelItem.id),
                #if(${useIsDeletedFlagYN} == "Y")
                db.qh.isFalse(item.isDeleted),
                #end
              ])
              .existsAsync())
          ) {
            throw new ArgumentError("동일한 ${name_kor}명이 이미 등록되어 있습니다.", {
                ${name_kor}명: excelItem.name,
            });
          }

          const upsertId = (
            await db.${data_name_camel}
              .where((item) => [db.qh.equal(item.id, excelItem.id)])
              .upsertAsync(() => ({
                name: excelItem.name,
                #if(${useIsDeletedFlagYN} == "Y")
                isDeleted: excelItem.isDeleted,
                #end
              }), ["id"])
          ).single()!.id!;

          await db.${data_name_camel}.insertDataLogAsync({
            type: "엑셀업로드",
            itemId: upsertId,
            valueJson: undefined,
            doneEmployeeId: this.#[[#]]#appData.authInfo()!.employee.id,
          });

          #if(${useSharedEmitYN} == "Y")
          changedIds.push(upsertId);
          #end
        }
      });

      #if(${useSharedEmitYN} == "Y")
      await this.#[[#]]#appSharedData.emitAsync("${name_kor}", changedIds);
      #end

      await this.#[[#]]#refresh();

      this.#[[#]]#sdToast.success("엑셀 업로드가 완료 되었습니다.");
    });
    this.busyCount.update((v) => v - 1);
  }
  #end


  protected readonly faRefresh = faRefresh;
  protected readonly faSearch = faSearch;
  protected readonly faPlusCircle = faPlusCircle;
  protected readonly faEraser = faEraser;
  #if(${useIsDeletedFlagYN} == "Y")
  protected readonly faRedo = faRedo;
  #end
  protected readonly faUpload = faUpload;
  protected readonly faFileExcel = faFileExcel;
  protected readonly faEdit = faEdit;
}

interface IFilterVM {
  #if(${fix_name_kebab} != "")
  include${fix_name_pascal}Ids: (number | undefined)[];
  #end
  searchText?: string;
  #if(${useIsDeletedFlagYN} == "Y")
  isIncludeDeleted: boolean;
  #end
}

interface IItemVM {
  id: number;
  name: string;
  #if(${useIsDeletedFlagYN} == "Y")
  isDeleted: boolean;
  #end
  #if(${useEditYN} == "Y")
  lastModifyDateTime?: DateTime;
  lastModifyEmployeeName?: string;
  #end
}

#if(${useSummaryYN} == "Y")
interface ISummaryVM {
  lastModifyDateTime?: DateTime;
}
#end
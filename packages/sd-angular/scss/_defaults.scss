*,
*:after,
*:before {
  box-sizing: border-box;
}

// HTML, BODY
html, body {
  height: 100%;
  width: 100%;
  padding: 0;
  margin: 0;
}

body {
  background: $sd-bg-color;
  color: get($text-brightness, default);
  font-family: $font-family;
  font-size: get($font-size, default);
  line-height: $line-height;
}

// DEFAULT TAGS
pre, code {
  font-size: get($font-size, default);
  line-height: $line-height;
  margin: 0;
}

pre {
  font-family: $font-family;
}

code {
  font-family: $font-family-monospace;
}

// BACKGROUND
@each $key1, $val1 in $theme {
  @each $key2, $val2 in $val1 {
    .sd-bg-#{$key1}-#{$key2} {
      background: $val2;
    }
  }
}

@each $key, $val in $trans-brightness {
  .sd-bg-trans-#{$key} {
    background: $val;
  }
}

@each $key, $val in $trans-brightness-rev {
  .sd-bg-trans-rev-#{$key} {
    background: $val;
  }
}

.sd-bg-white {
  background: white;
}

.sd-bg-default {
  background: $sd-bg-color;
}

// FONT SIZE
@each $key, $val in $font-size {
  .sd-font-size-#{$key} {
    font-size: $val;
  }
}

@each $h in (h1, h2, h3, h4, h5, h6) {
  #{$h} {
    font-size: get($font-size, $h);
    line-height: $line-height;
    margin: 0;
  }
}

// TEXT COLOR
@each $key, $val in $text-brightness {
  .sd-text-#{$key} {
    color: var(--text-#{$val});
  }
}

@each $key, $val in $text-brightness-rev {
  .sd-text-rev-#{$key} {
    color: var(--text-rev-#{$val});
  }
}

@each $key1, $val1 in $theme {
  @each $key2, $val2 in $val1 {
    .sd-text-#{$key1}-#{$key2} {
      color: $val2;
    }
  }
}

// BORDER
@each $key1, $val1 in $theme {
  @each $key2, $val2 in $val1 {
    .sd-border-#{$key1}-#{$key2} {
      border: 1px solid $val2;
    }
  }
}

@each $key, $val in $trans-brightness {
  .sd-border-#{$key} {
    border: 1px solid $val;
  }
}

@each $key, $val in $trans-brightness-rev {
  .sd-border-rev-#{$key} {
    border: 1px solid $val;
  }
}

.sd-border-0,
.sd-border-none {
  border: none;
}

// BORDER WITH DIRECTION
@each $dir in (top, right, bottom, left) {
  @each $key1, $val1 in $theme {
    @each $key2, $val2 in $val1 {
      .sd-border-#{$dir}-#{$key1}-#{$key2} {
        border-#{$dir}: 1px solid $val2;
      }
    }
  }

  @each $key, $val in $trans-brightness {
    .sd-border-#{$dir}-#{$key} {
      border-#{$dir}: 1px solid $val;
    }
  }

  @each $key, $val in $trans-brightness-rev {
    .sd-border-#{$dir}-rev-#{$key} {
      border-#{$dir}: 1px solid $val;
    }
  }

  .sd-border-#{$dir}-0,
  .sd-border-#{$dir}-none {
    border-#{$dir}: none;
  }
}

// GAP (PADDING, MARGIN)
@each $key, $val in $gap {
  .sd-padding-#{$key} {
    padding: $val;
  }

  .sd-margin-#{$key} {
    margin: $val;
  }
}

// GAP (PADDING, MARGIN) WITH DIRECTION
@each $dir in (top, right, bottom, left) {
  @each $key, $val in $gap {
    .sd-padding-#{$dir}-#{$key} {
      padding-#{$dir}: $val;
    }

    .sd-margin-#{$dir}-#{$key} {
      margin-#{$dir}: $val;
    }
  }
}

// GAP (PADDING, MARGIN) WITH [V & H]
@each $keyV, $valV in $gap {
  @each $keyH, $valH in $gap {
    .sd-padding-#{$keyV}-#{$keyH} {
      padding: $valV $valH;
    }

    .sd-margin-#{$keyV}-#{$keyH} {
      margin: $valV $valH;
    }
  }
}

// GAP (PADDING, MARGIN) WITH [V | H]
@each $key, $val in $gap {
  .sd-padding-v-#{$key} {
    padding-top: $val;
    padding-bottom: $val;
  }

  .sd-padding-h-#{$key} {
    padding-left: $val;
    padding-right: $val;
  }

  .sd-margin-v-#{$key} {
    padding-top: $val;
    padding-bottom: $val;
  }

  .sd-margin-h-#{$key} {
    padding-left: $val;
    padding-right: $val;
  }
}

// GAP (PADDING, MARGIN) WITH [ALL DIRECTION]
@each $keyT, $valT in $gap {
  @each $keyR, $valR in $gap {
    @each $keyB, $valB in $gap {
      @each $keyL, $valL in $gap {
        .sd-padding-#{$keyT}-#{$keyR}-#{$keyB}-#{$keyL} {
          padding: $valT $valR $valB $valL;
        }

        .sd-margin-#{$keyT}-#{$keyR}-#{$keyB}-#{$keyL} {
          margin: $valT $valR $valB $valL;
        }
      }
    }
  }
}

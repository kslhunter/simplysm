import { ArgumentError } from "../errors/ArgumentError";
import { DateTimeFormatUtil } from "../utils/DateTimeFormatUtil";
export class DateTime {
    constructor(arg1, arg2, arg3, arg4, arg5, arg6, arg7) {
        if (arg1 === undefined) {
            this.date = new Date();
        }
        else if (arg2 !== undefined && arg3 !== undefined) {
            this.date = new Date(arg1, arg2 - 1, arg3, arg4 ?? 0, arg5 ?? 0, arg6 ?? 0, arg7 ?? 0);
        }
        else if (arg1 instanceof Date) {
            this.date = arg1;
        }
        else {
            this.date = new Date(arg1);
        }
    }
    static parse(str) {
        const parsedTick = Date.parse(str);
        if (!Number.isNaN(parsedTick)) {
            return new DateTime(parsedTick);
        }
        const match1 = (/^([0-9]{4})-([0-9]{2})-([0-9]{2}) (오전|오후) ([0-9]{2}):([0-9]{2}):([0-9]{2})$/).exec(str);
        if (match1 != null) {
            return new DateTime(Number(match1[1]), Number(match1[2]), Number(match1[3]), Number(match1[5]) + (match1[4] === "오후" ? 12 : 0), Number(match1[6]), Number(match1[7]));
        }
        const match2 = (/^[0-9]{14}$/).exec(str);
        if (match2 != null) {
            return new DateTime(Number(str.substr(0, 4)), Number(str.substr(4, 2)), Number(str.substr(6, 2)), Number(str.substr(8, 2)), Number(str.substr(10, 2)), Number(str.substr(12, 2)));
        }
        const match3 = (/^([0-9]{4})-([0-9]{2})-([0-9]{2}) ([0-9]{2}):([0-9]{2}):([0-9]{2})(\.([0-9]{3}))?$/).exec(str);
        if (match3 != null) {
            return new DateTime(Number(match3[1]), Number(match3[2]), Number(match3[3]), Number(match3[4]), Number(match3[5]), Number(match3[6]), match3[8] ? Number(match3[8]) : undefined);
        }
        throw new ArgumentError({ str });
    }
    get year() {
        return this.date.getFullYear();
    }
    set year(value) {
        this.date.setFullYear(value);
    }
    get month() {
        return this.date.getMonth() + 1;
    }
    set month(value) {
        this.date.setMonth(value - 1);
    }
    get day() {
        return this.date.getDate();
    }
    set day(value) {
        this.date.setDate(value);
    }
    get hour() {
        return this.date.getHours();
    }
    set hour(value) {
        this.date.setHours(value);
    }
    get minute() {
        return this.date.getMinutes();
    }
    set minute(value) {
        this.date.setMinutes(value);
    }
    get second() {
        return this.date.getSeconds();
    }
    set second(value) {
        this.date.setSeconds(value);
    }
    get millisecond() {
        return this.date.getMilliseconds();
    }
    set millisecond(value) {
        this.date.setMilliseconds(value);
    }
    get tick() {
        return this.date.getTime();
    }
    set tick(tick) {
        this.date.setTime(tick);
    }
    get week() {
        return this.date.getDay();
    }
    get timezoneOffsetMinutes() {
        return -this.date.getTimezoneOffset();
    }
    setYear(year) {
        return new DateTime(new Date(this.tick).setFullYear(year));
    }
    setMonth(month) {
        const date = new Date(this.tick);
        date.setDate(1);
        date.setMonth(month);
        date.setDate(0);
        const lastDay = date.getDate();
        const currentDay = lastDay < this.day ? lastDay : this.day;
        date.setDate(currentDay);
        return new DateTime(date);
    }
    setDay(day) {
        return new DateTime(new Date(this.tick).setDate(day));
    }
    setHour(hour) {
        return new DateTime(new Date(this.tick).setHours(hour));
    }
    setMinute(minute) {
        return new DateTime(new Date(this.tick).setMinutes(minute));
    }
    setSecond(second) {
        return new DateTime(new Date(this.tick).setSeconds(second));
    }
    setMillisecond(millisecond) {
        return new DateTime(new Date(this.tick).setMilliseconds(millisecond));
    }
    addYears(years) {
        return this.setYear(this.year + years);
    }
    addMonths(months) {
        return this.setMonth(this.month + months);
    }
    addDays(days) {
        return this.setDay(this.day + days);
    }
    addHours(hours) {
        return this.setHour(this.hour + hours);
    }
    addMinutes(minutes) {
        return this.setMinute(this.minute + minutes);
    }
    addSeconds(seconds) {
        return this.setSecond(this.second + seconds);
    }
    addMilliseconds(milliseconds) {
        return this.setMillisecond(this.millisecond + milliseconds);
    }
    toFormatString(format) {
        return DateTimeFormatUtil.format(format, {
            year: this.year,
            month: this.month,
            day: this.day,
            hour: this.hour,
            minute: this.minute,
            second: this.second,
            millisecond: this.millisecond,
            timezoneOffsetMinutes: this.timezoneOffsetMinutes
        });
    }
    toString() {
        return this.toFormatString("yyyy-MM-ddTHH:mm:ss.fffzzz");
    }
}
//# sourceMappingURL=data:application/json;base64,
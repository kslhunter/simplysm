getBindAndCheckDiagnostics
var checkDiagnostics = includeBindAndCheckDiagnostics ? typeChecker.getDiagnostics(sourceFile, cancellationToken) : ts.emptyArray;
function getDiagnosticsWorker(sourceFile)



                      const prevUsage = process.cpuUsage();
                      const usage = process.cpuUsage(prevUsage);
                      if(usage.user + usage.system > 1000 * 1000) {
                        console.log("!!!", node);
                      }


------------------------------------------------
        function checkSourceElement(node) {
            if (node) {
              const prevUsage = process.cpuUsage();
                var saveCurrentNode = currentNode;
                currentNode = node;
                instantiationCount = 0;
                checkSourceElementWorker(node);
                currentNode = saveCurrentNode;
              const usage = process.cpuUsage(prevUsage);
              if(usage.user + usage.system > 100 * 1000 && node.kind !== 253) {
                const fn = (node) => {
                  let curr = node;
                  while(true){
                    curr = curr.parent;
                    if(curr === undefined) return undefined;
                    if(ts.isSourceFile(curr)) return curr;
                  }
                };
                let parent = fn(node);
                if(parent){
                  let { line, character } = parent.getLineAndCharacterOfPosition(node.getStart());
                  process.stdout.write(`\n${parent.fileName.replace(/\//g, "\\")}(${line+1}, ${character+1}): 느림 [${Math.round((usage.user + usage.system) / 1000)}ms/cpu, KIND: ${node.kind}]\n`);
                }
                else{
                  process.stdout.write(`\n(${line+1}, ${character+1}): 느림 \n`);
                }
              }
            }
        }

-----------------------------------------------------

        function checkSourceElement(node) {
          if (node) {
            const prevUsage = process.cpuUsage();

            var saveCurrentNode = currentNode;
            currentNode = node;
            instantiationCount = 0;
            checkSourceElementWorker(node);
            currentNode = saveCurrentNode;

            const usage = process.cpuUsage(prevUsage);
            if(usage.user + usage.system > 100 * 1000 && node.kind !== 253) {
              error(node, {
                code: 9000,
                category: ts.DiagnosticCategory.Warning,
                key: "simplysm_check_source_element_performance_slow",
                message: `${parent.fileName.replace(/\//g, "\\")}(${line+1}, ${character+1}): 느림 [${Math.round((usage.user + usage.system) / 1000)}ms/cpu, KIND: ${node.kind}]`
              });
            }
          }
        }


------------------------------------------------
        function checkDeferredNodes(context) {
            var links = getNodeLinks(context);
            if (links.deferredNodes) {
                links.deferredNodes.forEach((node) => {
                  const prevUsage = process.cpuUsage();
                  checkDeferredNode(node)
                  const usage = process.cpuUsage(prevUsage);
                  if(usage.user + usage.system > 1000 * 1000) {
                    let { line, character } = context.getLineAndCharacterOfPosition(node.getStart());
                    process.stdout.write("\n" + context.fileName.replace(/\//g, "\\") + `(${line+1}, ${character+1}): 느림`);
                  }
                });
            }
        }
